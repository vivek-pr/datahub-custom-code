apiVersion: batch/v1
kind: Job
metadata:
  name: tokenize-poc-smoke
  namespace: tokenize-poc
spec:
  template:
    metadata:
      labels:
        app: tokenize-poc-smoke
    spec:
      serviceAccountName: tokenize-poc-smoke
      restartPolicy: Never
      containers:
        - name: runner
          image: python:3.11-slim
          env:
            - name: DBX_JDBC_URL
              valueFrom:
                secretKeyRef:
                  name: tokenize-poc-secrets
                  key: DBX_JDBC_URL
          command:
            - /bin/sh
          args:
            - -c
            - |
              set -euo pipefail
              apt-get update >/dev/null && apt-get install -y curl >/dev/null
              SERVICE="http://tokenize-poc-action:8080/trigger"
              PG_PAYLOAD='{"dataset":"urn:li:dataset:(urn:li:dataPlatform:postgres,db.schema.customers,PROD)","columns":["email","phone"],"limit":100}'
              echo "Triggering Postgres tokenization"
              PG_FIRST=$(curl -s -X POST -H 'Content-Type: application/json' -d "$PG_PAYLOAD" "$SERVICE")
              echo "$PG_FIRST"
              PG_FIRST="$PG_FIRST" python - <<'PY'
import json, os, sys
payload = os.environ.get("PG_FIRST")
if not payload:
    raise SystemExit("PG_FIRST missing")
resp = json.loads(payload)
updated = resp.get("updated_count", 0)
if updated <= 0:
    raise SystemExit(f"expected updates on first PG run, got {updated}")
PY
              PG_SECOND=$(curl -s -X POST -H 'Content-Type: application/json' -d "$PG_PAYLOAD" "$SERVICE")
              echo "$PG_SECOND"
              PG_SECOND="$PG_SECOND" python - <<'PY'
import json, os
payload = os.environ.get("PG_SECOND")
resp = json.loads(payload)
updated = resp.get("updated_count", -1)
if updated != 0:
    raise SystemExit(f"expected zero updates on second PG run, got {updated}")
PY
              if [ -n "$DBX_JDBC_URL" ]; then
                DBX_PAYLOAD='{"dataset":"urn:li:dataset:(urn:li:dataPlatform:databricks,db.schema.customers,PROD)","columns":["email","phone"],"limit":100}'
                echo "Triggering Databricks tokenization"
                DBX_FIRST=$(curl -s -X POST -H 'Content-Type: application/json' -d "$DBX_PAYLOAD" "$SERVICE")
                echo "$DBX_FIRST"
                DBX_FIRST="$DBX_FIRST" python - <<'PY'
import json, os
payload = os.environ.get("DBX_FIRST")
resp = json.loads(payload)
if resp.get("updated_count", 0) <= 0:
    raise SystemExit(f"expected updates on first DBX run, got {resp}")
PY
                DBX_SECOND=$(curl -s -X POST -H 'Content-Type: application/json' -d "$DBX_PAYLOAD" "$SERVICE")
                echo "$DBX_SECOND"
                DBX_SECOND="$DBX_SECOND" python - <<'PY'
import json, os
payload = os.environ.get("DBX_SECOND")
resp = json.loads(payload)
if resp.get("updated_count") != 0:
    raise SystemExit(f"expected zero updates on second DBX run, got {resp}")
PY
              fi
