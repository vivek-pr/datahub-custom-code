name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  lint-unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Lint and unit tests
        run: make test

  e2e-kind:
    runs-on: ubuntu-latest
    needs: lint-unit
    env:
      IMAGE_TAG: ${{ github.sha }}
      K8S_NS: tokenize-poc
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install kubectl
        run: |
          curl -L https://dl.k8s.io/release/v1.29.3/bin/linux/amd64/kubectl -o kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      - name: Install kind
        run: |
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.22.0/kind-linux-amd64
          chmod +x kind
          sudo mv kind /usr/local/bin/kind

      - name: Install helm
        run: |
          curl -L https://get.helm.sh/helm-v3.14.4-linux-amd64.tar.gz -o helm.tar.gz
          tar -xf helm.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm

      - name: Build action image
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: make build IMAGE_TAG=${IMAGE_TAG} CLUSTER=kind

      - name: Provision environment and run smoke tests
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          K8S_NS: ${{ env.K8S_NS }}
        run: |
          set -e
          make up CLUSTER=kind IMAGE_TAG=${IMAGE_TAG} K8S_NS=${K8S_NS}
          make run K8S_NS=${K8S_NS}

      - name: Diagnostics on failure
        if: failure()
        env:
          K8S_NS: ${{ env.K8S_NS }}
        run: ./scripts/diag.sh ${K8S_NS} > diagnostics.log || true

      - name: Upload diagnostics
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: kind-diagnostics
          path: diagnostics.log

      - name: Cleanup
        if: always()
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          K8S_NS: ${{ env.K8S_NS }}
        run: make down CLUSTER=kind K8S_NS=${K8S_NS}
