name: CI

on:
  push:
    branches: ["*"]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Build ingestion tooling images
        run: docker compose build ingestion base64-action ui-ingestion-runner

      - name: Start DataHub stack
        run: |
          docker compose up -d \
            zookeeper kafka schema-registry kafka-setup \
            mysql mysql-setup \
            opensearch opensearch-setup \
            datahub-upgrade \
            datahub-gms datahub-mce-consumer datahub-mae-consumer \
            postgres

      - name: Wait for DataHub GMS health
        run: |
          for attempt in {1..30}; do
            if curl -sf http://localhost:8080/api/health | grep -q HEALTHY; then
              exit 0
            fi
            sleep 10
          done
          echo "GMS health check failed" >&2
          exit 1

      - name: Run baseline ingestion
        run: docker compose run --rm ingestion

      - name: Run classifier and encoder once
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: "5432"
          POSTGRES_DB: postgres
          POSTGRES_USER: datahub
          POSTGRES_PASSWORD: datahub
          DATAHUB_GMS_URL: http://localhost:8080
        run: |
          python -m scripts.run_classifier_and_encode \
            --pipeline-name postgres_local_poc \
            --platform postgres \
            --schema-allow public.*

      - name: Run pytest
        env:
          PYTHONPATH: ${{ github.workspace }}
          POSTGRES_HOST: localhost
          POSTGRES_PORT: "5432"
          POSTGRES_DB: postgres
          POSTGRES_USER: datahub
          POSTGRES_PASSWORD: datahub
          DATAHUB_GMS_URL: http://localhost:8080
        run: pytest -vv

      - name: Dump docker compose logs on failure
        if: failure()
        run: docker compose logs --no-color

      - name: Teardown stack
        if: always()
        run: docker compose down -v
